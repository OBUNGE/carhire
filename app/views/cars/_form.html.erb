<% car ||= @car %>

<% if flash[:notice] %>
  <div id="flash-notice" class="flash-message flash-notice">
    <strong>Success:</strong> <%= flash[:notice] %>
  </div>
<% elsif flash[:alert] %>
  <div id="flash-alert" class="flash-message flash-alert">
    <strong>Error:</strong> <%= flash[:alert] %>
  </div>
<% end %>

<div class="car-form-wrapper">
  <h1><%= car.new_record? ? "Add Car" : "Edit Car" %></h1>

  <%= form_with(model: car, local: true, html: { multipart: true }) do |form| %>
    <% if car.errors.any? %>
      <div class="flash-message flash-alert">
        <strong><%= pluralize(car.errors.count, "error") %> prevented this car from being saved:</strong>
        <ul>
          <% car.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <!-- Basic Info -->
    <div class="form-group">
      <%= form.label :make %>
      <%= form.text_field :make %>
    </div>

    <div class="form-group">
      <%= form.label :model %>
      <%= form.text_field :model %>
    </div>

    <div class="form-group">
      <%= form.label :year %>
      <%= form.number_field :year %>
    </div>

    <div class="form-group">
      <%= form.label :price, "Price (KES)" %>
      <%= form.number_field :price, step: 50 %>
    </div>

    <!-- Specs -->
    <div class="form-group">
      <%= form.label :transmission_type %>
      <%= form.select :transmission_type, ["Automatic", "Manual"], prompt: "Select transmission type" %>
    </div>

    <div class="form-group">
      <%= form.label :fuel_type %>
      <%= form.select :fuel_type, ["Petrol", "Diesel", "Electric", "Hybrid"], prompt: "Select fuel type" %>
    </div>

    <div class="form-group">
      <%= form.label :insurance_status %>
      <%= form.select :insurance_status, ["Fully insured", "Third-party", "Not insured"], prompt: "Select insurance status" %>
    </div>

    <div class="form-group">
      <%= form.label :seats, "Number of Seats" %>
      <%= form.number_field :seats, min: 1, max: 100, step: 1, placeholder: "e.g. 5" %>
    </div>

    <!-- Listing Type -->
    <div class="form-group">
      <%= form.label :listing_type %>
      <div class="radio-group">
        <% Car::LISTING_TYPES.each do |type| %>
          <label>
            <%= form.radio_button :listing_type, type %>
            <span><%= type.titleize %></span>
          </label>
        <% end %>
      </div>
    </div>

    <div class="form-group">
      <%= form.label :deposit_amount, "Security Deposit (KES)" %>
      <%= form.number_field :deposit_amount, step: 50, min: 0 %>
    </div>

    <!-- Description -->
    <div class="form-group">
      <%= form.label :description %>
      <%= form.text_area :description, rows: 4 %>
    </div>

    <!-- Existing Images -->
    <% if car.persisted? && car.car_images.any? %>
      <label class="form-group">Current Images</label>
      <div id="sortable-images" class="image-preview">
        <% car.car_images.each do |img| %>
          <div class="sortable-item" data-id="<%= img.id %>">
            <div class="drag-handle">â˜°</div>
            <%= image_tag img.image_url %>
            <div class="image-actions">
              <% if img.cover? %>
                <span class="cover-label">Cover âœ“</span>
              <% else %>
                <a href="#"
                   class="cover-link"
                   onclick="setCover('<%= set_cover_car_car_image_path(car, img) %>', this)">
                   Make Cover
                </a>
              <% end %>
              <a href="#"
                 class="delete-link"
                 onclick="confirmDelete('<%= car_car_image_path(car, img) %>', this)">
                 ðŸ—‘ Delete
              </a>
            </div>
          </div>
        <% end %>
      </div>
    <% end %>

    <!-- Upload New Images -->
    <div class="form-group">
      <%= form.label :images, "Upload Car Images" %>
      <%= form.file_field :images, multiple: true, accept: "image/*" %>
      <p class="hint">You can select multiple files. Accepted formats: JPG, PNG.</p>
      <div id="preview-area" class="image-preview"></div>
    </div>

    <!-- Location -->
    <div class="form-group">
      <%= form.label :pickup_address %>
      <%= form.text_field :pickup_address %>
    </div>

    <div class="form-group">
      <%= form.label :latitude %>
      <%= form.text_field :latitude %>
    </div>

    <div class="form-group">
      <%= form.label :longitude %>
      <%= form.text_field :longitude %>
    </div>

    <!-- Category -->
    <div class="form-group">
      <%= form.label :category %>
      <%= form.select :category, ['SUV', 'Sedan', 'Hatchback', 'Truck', 'Van', 'Luxury', 'Convertible', 'Electric Car', 'Other'], { prompt: 'Select a category' } %>
    </div>

    <!-- Buttons -->
    <div class="button-group">
      <%= form.submit "Save as Draft", name: "draft", class: "button-secondary" %>
      <%= form.submit "Publish", name: "publish", class: "button-primary" %>
    </div>
  <% end %>
</div>



<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  // Flash fade
  ["flash-notice", "flash-alert"].forEach(id => {
    const el = document.getElementById(id);
    if (el) {
      setTimeout(() => {
        el.style.transition = "opacity 0.5s ease-out";
        el.style.opacity = "0";
        setTimeout(() => el.remove(), 500);
      }, 4000);
    }
  });

  // SortableJS
  const el = document.getElementById("sortable-images");
  if (el) {
    new Sortable(el, {
      animation: 150,
      handle: ".drag-handle",
      onEnd: function () {
        const ids = Array.from(el.querySelectorAll(".sortable-item"))
                         .map(item => item.dataset.id);

        fetch("<%= reorder_car_car_images_path(car) %>", {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector('meta[name=\"csrf-token\"]').content
          },
          body: JSON.stringify({ car_image_ids: ids })
        }).then(() => {
          const toast = document.createElement("div");
          toast.textContent = "Image order saved âœ…";
          toast.style.position = "fixed";
          toast.style.bottom = "20px";
          toast.style.right = "20px";
          toast.style.background = "#2563eb";
          toast.style.color = "white";
          toast.style.padding = "12px 20px";
          toast.style.borderRadius = "8px";
          toast.style.boxShadow = "0 4px 12px rgba(0,0,0,0.2)";
          toast.style.zIndex = "9999";
          toast.style.fontWeight = "500";
          document.body.appendChild(toast);
          setTimeout(() => {
            toast.style.opacity = "0";
            setTimeout(() => toast.remove(), 500);
          }, 3000);
        });
      }
    });
  }

  // Image preview for uploads
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  // Flash fade
  ["flash-notice", "flash-alert"].forEach(id => {
    const el = document.getElementById(id);
    if (el) {
      setTimeout(() => {
        el.style.transition = "opacity 0.5s ease-out";
        el.style.opacity = "0";
        setTimeout(() => el.remove(), 500);
      }, 4000);
    }
  });

  // SortableJS
  const el = document.getElementById("sortable-images");
  if (el) {
    new Sortable(el, {
      animation: 150,
      handle: ".drag-handle",
      onEnd: function () {
        const ids = Array.from(el.querySelectorAll(".sortable-item"))
                         .map(item => item.dataset.id);

        fetch("<%= reorder_car_car_images_path(car) %>", {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
            "Accept": "application/json"
          },
          body: JSON.stringify({ car_image_ids: ids })
        }).then(() => showToast("Image order saved âœ…", "#2563eb"));
      }
    });
  }

  // Image preview for uploads
  const fileInput = document.querySelector('input[type="file"][multiple]');
  const previewArea = document.getElementById("preview-area");

  if (fileInput && previewArea) {
    fileInput.addEventListener("change", () => {
      previewArea.innerHTML = ""; // Clear previous previews

      Array.from(fileInput.files).forEach(file => {
        const reader = new FileReader();
        reader.onload = e => {
          const imgWrapper = document.createElement("div");
          imgWrapper.style.position = "relative";
          imgWrapper.style.borderRadius = "6px";
          imgWrapper.style.overflow = "hidden";
          imgWrapper.style.boxShadow = "0 2px 8px rgba(0,0,0,0.1)";
          imgWrapper.style.marginBottom = "8px";

          const img = document.createElement("img");
          img.src = e.target.result;
          img.style.width = "100%";
          img.style.height = "auto";
          img.style.display = "block";
          img.style.objectFit = "cover";

          imgWrapper.appendChild(img);
          previewArea.appendChild(imgWrapper);
        };
        reader.readAsDataURL(file);
      });
    });
  }

  // Inline delete
  window.confirmDelete = function(url, el) {
    if (confirm("Are you sure you want to delete this image?")) {
      fetch(url, {
        method: "DELETE",
        headers: {
          "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
          "Accept": "application/json"
        }
      }).then(response => {
        if (response.ok) {
          el.closest(".sortable-item").remove();
          showToast("Image deleted âœ…", "#dc2626");
        }
      });
    }
  };

  // Inline cover toggle
  window.setCover = function(url, el) {
    fetch(url, {
      method: "PATCH",
      headers: {
        "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content,
        "Accept": "application/json"
      }
    }).then(response => {
      if (response.ok) {
        // Reset all cover labels
        document.querySelectorAll(".cover-label").forEach(lbl => lbl.remove());
        document.querySelectorAll(".cover-link").forEach(link => {
          link.style.display = "inline";
        });

        // Add cover label to this image
        const actions = el.closest(".image-actions");
        actions.querySelector(".cover-link").style.display = "none";
        const span = document.createElement("span");
        span.className = "cover-label";
        span.textContent = "Cover âœ“";
        actions.prepend(span);

        showToast("Cover updated âœ…", "#2563eb");
      }
    });
  };

  // Toast helper
  function showToast(message, bgColor) {
    const toast = document.createElement("div");
    toast.textContent = message;
    toast.style.position = "fixed";
    toast.style.bottom = "20px";
    toast.style.right = "20px";
    toast.style.background = bgColor;
    toast.style.color = "white";
    toast.style.padding = "12px 20px";
    toast.style.borderRadius = "8px";
    toast.style.boxShadow = "0 4px 12px rgba(0,0,0,0.2)";
    toast.style.zIndex = "9999";
    toast.style.fontWeight = "500";
    document.body.appendChild(toast);
    setTimeout(() => {
      toast.style.opacity = "0";
      setTimeout(() => toast.remove(), 500);
    }, 3000);
  }
});
</script>
